<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>杂谈 on 知道点代码</title>
        <link>http://localhost:1313/actions-test/categories/%E6%9D%82%E8%B0%88/</link>
        <description>Recent content in 杂谈 on 知道点代码</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <lastBuildDate>Thu, 17 Oct 2024 00:00:00 +0000</lastBuildDate><atom:link href="http://localhost:1313/actions-test/categories/%E6%9D%82%E8%B0%88/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>一个接口适配八个请求</title>
        <link>http://localhost:1313/actions-test/p/%E4%B8%80%E4%B8%AA%E6%8E%A5%E5%8F%A3%E9%80%82%E9%85%8D%E5%85%AB%E4%B8%AA%E8%AF%B7%E6%B1%82/</link>
        <pubDate>Thu, 17 Oct 2024 00:00:00 +0000</pubDate>
        
        <guid>http://localhost:1313/actions-test/p/%E4%B8%80%E4%B8%AA%E6%8E%A5%E5%8F%A3%E9%80%82%E9%85%8D%E5%85%AB%E4%B8%AA%E8%AF%B7%E6%B1%82/</guid>
        <description>&lt;p&gt;肯定有不少人会想：这怎么可能呢？就算用几乎零配置的 SpringBoot，写一个最简单的接口也得有 3 行代码啊！@RequestMapping(&amp;ldquo;test/{request}&amp;rdquo;)
public String test(@PathVariable String request) {
    return request + &amp;ldquo;: Hello World&amp;rdquo;;
}
那 8 个没啥用的 Hello World 接口就得 24 行代码了！这还没算拼 SQL 连 JDBC 或者调用 ORM 库 的代码呢！更不用说还要写 XML 配置 的其它库了！没错，用传统方式就是这样。获取一个用户：base_url/get/user
获取一个用户列表：base_url/get/user/list
获取一个评论：base_url/get/comment
获取一个评论列表：base_url/get/comment/list
&amp;hellip;仅仅是查询，一张表(对应客户端的 model)就要两个接口了，如果再加上增删改，批量改批量删，还有统计，那就得有 8 个接口了！那么我是怎么解决的呢？同一种类型的请求都只用一个接口：增 base_url/post&lt;/p&gt;
&lt;p&gt;删（包括批量） base_url/delete&lt;/p&gt;
&lt;p&gt;改（包括批量） base_url/put&lt;/p&gt;
&lt;p&gt;查（包括列表） base_url/get&lt;/p&gt;
&lt;p&gt;统计 base_url/head
用最常用的查询请求举例：获取一个用户：base_url/get/
获取一个用户列表：base_url/get/
获取一个评论：base_url/get
获取一个评论列表：base_url/get
&amp;hellip;都是用同一个接口！我是怎么做到的呢？APIJSON，对，就它！我们用 APIJSON 来操作一张表，例如用户表 User，代码写 3 行就够了：//注册表并添加权限，用默认配置
@MethodAccess
public class User {
//内容一般仅供表字段说明及 Android App 开发使用，服务端不用的可不写。
}&lt;/p&gt;
&lt;p&gt;//Verifier 内添加权限
accessMap.put(User.class.getSimpleName(), getAccessMap(User.class.getAnnotation(MethodAccess.class)));
或者可以再定制下 POST 请求的角色权限：@MethodAccess(
  POST = {UNKNOWN, ADMIN} //只允许未登录角色和管理员角色新增 User，默认配置是 {LOGIN, ADMIN}
)
public class User {}
然后运行下 Server 工程就可以请求了：URL：http://apijson.cn:8080/get
表单：{
    &amp;ldquo;User&amp;rdquo;: {
        &amp;ldquo;id&amp;rdquo;: 82001
    }
}
返回：{
    &amp;ldquo;User&amp;rdquo;: {
        &amp;ldquo;id&amp;rdquo;: 82001,
        &amp;ldquo;sex&amp;rdquo;: 0,
        &amp;ldquo;name&amp;rdquo;: &amp;ldquo;Test&amp;rdquo;,
        &amp;ldquo;tag&amp;rdquo;: &amp;ldquo;APIJSON User&amp;rdquo;,
        &amp;ldquo;head&amp;rdquo;: &amp;ldquo;&lt;a class=&#34;link&#34; href=&#34;http://static.oschina.net/uploads/user/19/39085_50.jpg%22&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://static.oschina.net/uploads/user/19/39085_50.jpg&#34;&lt;/a&gt;,
        &amp;ldquo;contactIdList&amp;rdquo;: [
            82004,
            82021,
            70793
        ],
        &amp;ldquo;pictureList&amp;rdquo;: [
            &amp;ldquo;http://common.cnblogs.com/images/icon_weibo_24.png&amp;rdquo;
        ],
        &amp;ldquo;date&amp;rdquo;: &amp;ldquo;2017-02-01 19:21:50.0&amp;rdquo;
    },
    &amp;ldquo;code&amp;rdquo;: 200,
    &amp;ldquo;msg&amp;rdquo;: &amp;ldquo;success&amp;rdquo;
}
上面只是查了一个 User，如果我们要查女性用户列表，可以这样：URL：http://apijson.cn:8080/get表单：
{
    &amp;ldquo;[]&amp;quot;: { //数组
        &amp;ldquo;User&amp;rdquo;: {
            &amp;ldquo;sex&amp;rdquo;: 1, //性别为女
            &amp;ldquo;@column&amp;rdquo;: &amp;ldquo;id,name&amp;rdquo; //只需要id,name这两个字段
        }
    }
}
返回：{
    &amp;ldquo;[]&amp;quot;: [
        {
            &amp;ldquo;User&amp;rdquo;: {
                &amp;ldquo;id&amp;rdquo;: 82002,
                &amp;ldquo;name&amp;rdquo;: &amp;ldquo;Happy~&amp;rdquo;
            }
        },
        {
            &amp;ldquo;User&amp;rdquo;: {
                &amp;ldquo;id&amp;rdquo;: 82003,
                &amp;ldquo;name&amp;rdquo;: &amp;ldquo;Wechat&amp;rdquo;
            }
        },
        {
            &amp;ldquo;User&amp;rdquo;: {
                &amp;ldquo;id&amp;rdquo;: 82005,
                &amp;ldquo;name&amp;rdquo;: &amp;ldquo;Jan&amp;rdquo;
            }
        }
    ],
    &amp;ldquo;code&amp;rdquo;: 200,
    &amp;ldquo;msg&amp;rdquo;: &amp;ldquo;success&amp;rdquo;
}
User 被多包裹了一层？给数组命名为 User[] 来去掉吧：表单：{
    &amp;ldquo;User[]&amp;quot;: { //提取User
        &amp;ldquo;User&amp;rdquo;: {
            &amp;ldquo;sex&amp;rdquo;: 1, //性别为女
            &amp;ldquo;@column&amp;rdquo;: &amp;ldquo;id,name&amp;rdquo; //只需要id,name这两个字段
        }
    }
返回：{
    &amp;ldquo;User[]&amp;quot;: [
        {
            &amp;ldquo;id&amp;rdquo;: 82002,
            &amp;ldquo;name&amp;rdquo;: &amp;ldquo;Happy~&amp;rdquo;
        },
        {
            &amp;ldquo;id&amp;rdquo;: 82003,
            &amp;ldquo;name&amp;rdquo;: &amp;ldquo;Wechat&amp;rdquo;
        },
        {
            &amp;ldquo;id&amp;rdquo;: 82005,
            &amp;ldquo;name&amp;rdquo;: &amp;ldquo;Jan&amp;rdquo;
        }
    ],
    &amp;ldquo;code&amp;rdquo;: 200,
    &amp;ldquo;msg&amp;rdquo;: &amp;ldquo;success&amp;rdquo;
}
还要进一步提取名字？User-name[] 满足你：表单：{
    &amp;ldquo;User-name[]&amp;quot;: { //提取User.name
        &amp;ldquo;User&amp;rdquo;: {
            &amp;ldquo;sex&amp;rdquo;: 1, //性别为女
            &amp;ldquo;@column&amp;rdquo;: &amp;ldquo;name&amp;rdquo; //只需要name这个字段
        }
    }
}
返回：{
    &amp;ldquo;User-name[]&amp;quot;: [
        &amp;ldquo;Happy~&amp;rdquo;,
        &amp;ldquo;Wechat&amp;rdquo;,
        &amp;ldquo;Jan&amp;rdquo;,
        &amp;ldquo;Meria&amp;rdquo;,
        &amp;ldquo;Tommy&amp;rdquo;
    ],
    &amp;ldquo;code&amp;rdquo;: 200,
    &amp;ldquo;msg&amp;rdquo;: &amp;ldquo;success&amp;rdquo;
}
但如果是含多张表关联的数组，就不要去掉了哦：表单：{
    &amp;ldquo;[]&amp;quot;: {
        &amp;ldquo;Comment&amp;rdquo;: {}, //评论
        &amp;ldquo;User&amp;rdquo;: {      //发布评论的用户
            &amp;ldquo;id@&amp;quot;: &amp;ldquo;/Comment/userId&amp;rdquo; //User.id = Comment.userId
        }
    }
}
返回：{
    &amp;ldquo;[]&amp;quot;: [
        {
            &amp;ldquo;Comment&amp;rdquo;: {
                &amp;ldquo;id&amp;rdquo;: 3,
                &amp;ldquo;toId&amp;rdquo;: 0,
                &amp;ldquo;userId&amp;rdquo;: 82002,
                &amp;ldquo;momentId&amp;rdquo;: 15,
                &amp;ldquo;date&amp;rdquo;: &amp;ldquo;2017-02-01 19:20:50.0&amp;rdquo;,
                &amp;ldquo;content&amp;rdquo;: &amp;ldquo;This is a Content&amp;hellip;-3&amp;rdquo;
            },
            &amp;ldquo;User&amp;rdquo;: {
                &amp;ldquo;id&amp;rdquo;: 82002,
                &amp;ldquo;sex&amp;rdquo;: 1,
                &amp;ldquo;name&amp;rdquo;: &amp;ldquo;Happy~&amp;rdquo;,
                &amp;ldquo;tag&amp;rdquo;: &amp;ldquo;iOS&amp;rdquo;,
                &amp;ldquo;head&amp;rdquo;: &amp;ldquo;http://static.oschina.net/uploads/user/1174/2348263_50.png?t=1439773471000&amp;rdquo;,
                &amp;ldquo;contactIdList&amp;rdquo;: [
                    82005,
                    82001,
                    38710
                ],
                &amp;ldquo;pictureList&amp;rdquo;: [],
                &amp;ldquo;date&amp;rdquo;: &amp;ldquo;2017-02-01 19:21:50.0&amp;rdquo;
            }
        },
        {
            &amp;ldquo;Comment&amp;rdquo;: {
                &amp;ldquo;id&amp;rdquo;: 4,
                &amp;ldquo;toId&amp;rdquo;: 0,
                &amp;ldquo;userId&amp;rdquo;: 38710,
                &amp;ldquo;momentId&amp;rdquo;: 470,
                &amp;ldquo;date&amp;rdquo;: &amp;ldquo;2017-02-01 19:20:50.0&amp;rdquo;,
                &amp;ldquo;content&amp;rdquo;: &amp;ldquo;This is a Content&amp;hellip;-4&amp;rdquo;
            },
            &amp;ldquo;User&amp;rdquo;: {
                &amp;ldquo;id&amp;rdquo;: 38710,
                &amp;ldquo;sex&amp;rdquo;: 0,
                &amp;ldquo;name&amp;rdquo;: &amp;ldquo;TommyLemon&amp;rdquo;,
                &amp;ldquo;tag&amp;rdquo;: &amp;ldquo;Android&amp;amp;Java&amp;rdquo;,
                &amp;ldquo;head&amp;rdquo;: &amp;ldquo;http://static.oschina.net/uploads/user/1218/2437072_100.jpg?t=1461076033000&amp;rdquo;,
                &amp;ldquo;contactIdList&amp;rdquo;: [
                    82003,
                    82005
                ],
                &amp;ldquo;pictureList&amp;rdquo;: [
                    &amp;ldquo;http://static.oschina.net/uploads/user/1218/2437072_100.jpg?t=1461076033000&amp;rdquo;,
                    &amp;ldquo;http://common.cnblogs.com/images/icon_weibo_24.png&amp;rdquo;
                ],
                &amp;ldquo;date&amp;rdquo;: &amp;ldquo;2017-02-01 19:21:50.0&amp;rdquo;
            }
        }
    ],
    &amp;ldquo;code&amp;rdquo;: 200,
    &amp;ldquo;msg&amp;rdquo;: &amp;ldquo;success&amp;rdquo;
}
还有动态 Moment 和它的点赞用户列表：{
    &amp;ldquo;Moment&amp;rdquo;: {},
    &amp;ldquo;User[]&amp;quot;: {
        &amp;ldquo;User&amp;rdquo;: {
            &amp;ldquo;id{}@&amp;quot;: &amp;ldquo;Moment/praiseUserIdList&amp;rdquo; //id在点赞列表praiseUserIdList内
        }
    }
}
类似微信个人资料界面：{
    &amp;ldquo;User&amp;rdquo;: {},
    &amp;ldquo;Moment[]&amp;quot;: { //朋友圈照片列表
        &amp;ldquo;Moment&amp;rdquo;: {
            &amp;ldquo;@order&amp;rdquo;:&amp;ldquo;date-&amp;quot;, //按发布时间date倒序排列
            &amp;ldquo;userId@&amp;quot;: &amp;ldquo;User/id&amp;rdquo;
        }
    }
}
类似微信朋友圈的动态列表：{
    &amp;ldquo;[]&amp;quot;: {
        &amp;ldquo;count&amp;rdquo;: 3, //只要3个
        &amp;ldquo;page&amp;rdquo;: 2,  //要第2页的
        &amp;ldquo;Moment&amp;rdquo;: {},
        &amp;ldquo;User&amp;rdquo;: {
            &amp;ldquo;id@&amp;quot;: &amp;ldquo;/Moment/userId&amp;rdquo;
        },
        &amp;ldquo;Comment[]&amp;quot;: {
            &amp;ldquo;Comment&amp;rdquo;: {
                &amp;ldquo;momentId@&amp;quot;: &amp;ldquo;[]/Moment/id&amp;rdquo;
            }
        }
    }
}
&amp;hellip;任意结构，任意内容，任意组合，想要什么 JSON 结构、字段内容、表关联组合查询都可以完全自定义！&amp;ldquo;key[]&amp;rdquo;:{}                                         // 查询数组&lt;/p&gt;
&lt;p&gt;&amp;ldquo;key{}&amp;rdquo;:[1,2,3]                                    // 匹配选项范围&lt;/p&gt;
&lt;p&gt;&amp;ldquo;key{}&amp;rdquo;:&amp;quot;&amp;lt;=10,length(key)&amp;gt;1&amp;hellip;&amp;rdquo;                    // 匹配条件范围&lt;/p&gt;
&lt;p&gt;&amp;ldquo;key()&amp;rdquo;:&amp;ldquo;function(arg0,arg1&amp;hellip;)&amp;rdquo;                   // 远程调用函数&lt;/p&gt;
&lt;p&gt;&amp;ldquo;key@&amp;rdquo;:&amp;ldquo;key0/key1&amp;hellip;/targetKey&amp;rdquo;                    // 引用赋值&lt;/p&gt;
&lt;p&gt;&amp;ldquo;key$&amp;rdquo;:&amp;quot;%abc%&amp;rdquo;                                     // 模糊搜索&lt;/p&gt;
&lt;p&gt;&amp;ldquo;key?&amp;rdquo;:&amp;quot;^[0-9]+$&amp;rdquo;                                  // 正则匹配&lt;/p&gt;
&lt;p&gt;&amp;ldquo;key+&amp;rdquo;:[1]                                         // 增加/扩展&lt;/p&gt;
&lt;p&gt;&amp;ldquo;key-&amp;quot;:888.88                                     // 减少/去除&lt;/p&gt;
&lt;p&gt;&amp;ldquo;name:alias&amp;rdquo;                                      // 新建别名&lt;/p&gt;
&lt;p&gt;&amp;ldquo;@column&amp;rdquo;:&amp;ldquo;id,sex,name&amp;rdquo;                           // 返回字段&lt;/p&gt;
&lt;p&gt;&amp;ldquo;@group&amp;rdquo;:&amp;ldquo;userId&amp;rdquo;                                 // 分组方式&lt;/p&gt;
&lt;p&gt;&amp;ldquo;@having&amp;rdquo;:&amp;ldquo;max(id)&amp;gt;=100&amp;rdquo;                          // 聚合函数&lt;/p&gt;
&lt;p&gt;&amp;ldquo;@order&amp;rdquo;:&amp;ldquo;date-,name+&amp;rdquo;                            // 排序方式&lt;/p&gt;
&lt;p&gt;以上都是查询请求，再试试 增删改 和 统计 ：增: http://apijson.cn:8080/post{
    &amp;ldquo;Comment&amp;rdquo;: {
        &amp;ldquo;userId&amp;rdquo;: 82001,
        &amp;ldquo;momentId&amp;rdquo;: 15,
        &amp;ldquo;content&amp;rdquo;: &amp;ldquo;测试新增评论&amp;rdquo;
    },
    &amp;ldquo;tag&amp;rdquo;: &amp;ldquo;Comment&amp;rdquo;
}
删: http://apijson.cn:8080/delete{
    &amp;ldquo;Comment&amp;rdquo;: {
        &amp;ldquo;id&amp;rdquo;: 1510394480987
    },
    &amp;ldquo;tag&amp;rdquo;: &amp;ldquo;Comment&amp;rdquo;
}
改: http://apijson.cn:8080/put{
    &amp;ldquo;Comment&amp;rdquo;: {
        &amp;ldquo;id&amp;rdquo;: 22,
        &amp;ldquo;content&amp;rdquo;: &amp;ldquo;测试修改评论&amp;rdquo;
    },
    &amp;ldquo;tag&amp;rdquo;: &amp;ldquo;Comment&amp;rdquo;
}
批量删: http://apijson.cn:8080/delete{
    &amp;ldquo;Comment&amp;rdquo;: {
        &amp;ldquo;id{}&amp;quot;: [1510394480987, 1510394804925]
    },
    &amp;ldquo;tag&amp;rdquo;: &amp;ldquo;Comment[]&amp;rdquo;
}
批量改: http://apijson.cn:8080/put{
    &amp;ldquo;Comment&amp;rdquo;: {
        &amp;ldquo;id{}&amp;quot;: [22, 114],
        &amp;ldquo;content&amp;rdquo;: &amp;ldquo;测试批量修改评论&amp;rdquo;
    },
    &amp;ldquo;tag&amp;rdquo;: &amp;ldquo;Comment[]&amp;rdquo;
}
统计: http://apijson.cn:8080/head{
    &amp;ldquo;Comment&amp;rdquo;: {
        &amp;ldquo;content$&amp;quot;: &amp;ldquo;%测试%&amp;rdquo; //内容包含 测试 两个字
    }
}
写操作需要对应的权限，就是用 3 行代码配置的，请求报错：登录后角色自动变为 LOGIN(可传@role 来自定义)，符合 Comment 的 POST 权限配置，成功：回想下，代码才写了 3 行，就实现了包括增删改查等各种操作的 8 个接口以及这么多种查询！事实上用 APIJSON 根本就不用自己写接口！这 3 行代码其实是为了做权限管理！像个人博客、非商业的新闻资讯网站这种可以没有权限控制的，改下全局配置，不做权限校验，那就连一行代码都不用写了！！！&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
