[{"content":"Hugo官网\n运行环境 hugo版本：v0.117.0（扩展版）\ngo：1.21.0\nPowerShell 7（x64）\nWindows10\nHugo是一个使用Go编写的静态站点生成器，即网站构建工具。\n静态的意思是指在内容在网站上呈现之前需要全部编译成HTML文件。而动态的站点生成器是请求哪个页面就编译生成哪个HTML页面。\n在Windows上可以选用包管理器Chocolatey、Scoop、Winget来安装Hugo。\n这里我选择使用winget来安装。\n安装winget：从 Microsoft Store 获取应用程序安装程序。再安装Hugo扩展版。\nwinget install Hugo.Hugo.Extended 1 测试安装成功与否：hugo version。\n使用 Hugo 时通常会使用Git、Go和Dart Sass 。Go环境则是主要用于Hugo的模块功能。Dart Sass 将 Sass 转译为 CSS。\nWindows 10 默认是 Windows PowerShell 是 5.X 版本，在 Win10 V1903 以上版本后，打开 PowerShell 时，会提示 “尝试新的跨平台 PowerShell aka.ms/pscore6 ” 。安装新版PowerShell：\n$ winget search Microsoft.PowerShell Name Id Version Source PowerShell Microsoft.PowerShell 7.3.6.0 winget PowerShell Preview Microsoft.PowerShell.Preview 7.4.0.3 winget $ winget install \u0026ndash;id Microsoft.Powershell \u0026ndash;source winget 初始化 我们在文档下面创建一个名为MyHugoSite的目录结构：\n1 2 3 cd Documents hugo new site MyHugoSite cd MyHugoSite 提示告诉我们有关主题的获取方式、文件的添加和站点的构建。\n将MyHugoSite目录初始化为Git存储库：\n1 2 3 4 git init 添加主题 git submodule add https://github.com/CaiJimmy/hugo-theme-stack/ themes/hugo-theme-stack 使用git submodule命令添加一个子模块到themes文件夹下，这个主题子模块可以用作参考。当我们需要对其样式或功能做出修改时，可以将其内容部分或文件拷贝到根目录下（MyHugoSite）对应位置。\n启用主题：在hugo.toml中添加一句theme=\u0026lsquo;hugo-theme-stack\u0026rsquo;：\n启动Hugo的开发服务器查看站点：\n1 hugo server 按ctrl+C停止。\n默认不包括草稿内容。\n添加新页面：\n1 hugo new content posts/the-first-post.md 启动服务器，且包含草稿内容：\n1 2 3 hugo server --buildDrafts 或 hugo server -D 1 2 3 修改配置文件 mv hugo.toml hugo.toml.bak cp themes/hugo-theme-stack/exampleSite/config.yaml . 2023/8/26的config.yaml\nbaseurl: https://example.com # languageCode: en-us languageCode: zh-cn theme: hugo-theme-stack paginate: 5 title: 影麟 copyright: 影麟 languages: zh-cn: languageName: 中文 # 博客名 title: 影麟 weight: 1 params: description: 影麟的个人博客 # en: # languageName: English # title: Example Site # weight: 2 # params: # description: Example description # ar: # languageName: عربي # languagedirection: rtl # title: موقع تجريبي # weight: 3 # params: # description: وصف تجريبي # Change it to your Disqus shortname before using disqusShortname: hugo-theme-stack # GA Tracking ID googleAnalytics: # Theme i18n support # Available values: ar, bn, ca, de, el, en, es, fr, hu, id, it, ja, ko, nl, pt-br, th, uk, zh-cn, zh-hk, zh-tw DefaultContentLanguage: zh-cn # Set hasCJKLanguage to true if DefaultContentLanguage is in [zh-cn ja ko] # This will make .Summary and .WordCount behave correctly for CJK languages. hasCJKLanguage: true permalinks: post: /p/:slug/ page: /:slug/ params: mainSections: - post featuredImageField: image rssFullContent: true favicon: # e.g.: favicon placed in `static/favicon.ico` of your site folder, then set this field to `/favicon.ico` (`/` is necessary) footer: since: 2020 customText: # 日期格式 dateFormat: published: Jan 02, 2006 lastUpdated: Jan 02, 2006 15:04 MST sidebar: # 头像处的表情 emoji: 🍥 # 简介 subtitle: 学无止境，勇攀高峰！ avatar: enabled: true local: true # 位于assets/img/下的图片，头像 src: img/avatar.png article: math: false toc: true readingTime: true license: enabled: true default: Licensed under CC BY-NC-SA 4.0 comments: enabled: true provider: disqus disqusjs: shortname: apiUrl: apiKey: admin: adminLabel: utterances: repo: issueTerm: pathname label: remark42: host: site: locale: vssue: platform: owner: repo: clientId: clientSecret: autoCreateIssue: false # Waline client configuration see: https://waline.js.org/en/reference/component.html waline: serverURL: lang: pageview: emoji: - https://unpkg.com/@waline/emojis@1.0.1/weibo requiredMeta: - name - email - url locale: admin: Admin placeholder: twikoo: envId: region: path: lang: # See https://cactus.chat/docs/reference/web-client/#configuration for description of the various options cactus: defaultHomeserverUrl: \u0026#34;https://matrix.cactus.chat:8448\u0026#34; serverName: \u0026#34;cactus.chat\u0026#34; siteName: \u0026#34;\u0026#34; # You must insert a unique identifier here matching the one you registered (See https://cactus.chat/docs/getting-started/quick-start/#register-your-site) giscus: repo: repoID: category: categoryID: mapping: lightTheme: darkTheme: reactionsEnabled: 1 emitMetadata: 0 gitalk: owner: admin: repo: clientID: clientSecret: cusdis: host: id: widgets: homepage: - type: search - type: archives params: limit: 5 - type: categories params: limit: 10 - type: tag-cloud params: limit: 10 page: - type: toc opengraph: twitter: # Your Twitter username site: # Available values: summary, summary_large_image card: summary_large_image defaultImage: opengraph: enabled: false local: false src: colorScheme: # Display toggle toggle: true # Available values: auto, light, dark default: auto imageProcessing: cover: enabled: true content: enabled: true ### Custom menu ### See https://docs.stack.jimmycai.com/configuration/custom-menu.html ### To remove about, archive and search page menu item, remove `menu` field from their FrontMatter menu: main: [] social: - identifier: github name: GitHub url: https://github.com/Shadow-Kylin/Shadow-Kylin.github.io params: icon: brand-github # - identifier: twitter # name: Twitter # url: https://twitter.com # params: # icon: brand-twitter related: includeNewer: true threshold: 60 toLower: false indices: - name: tags weight: 100 - name: categories weight: 200 markup: goldmark: renderer: ## Set to true if you have HTML content inside Markdown unsafe: true tableOfContents: endLevel: 6 ordered: true startLevel: 1 highlight: noClasses: false codeFences: true guessSyntax: true lineNoStart: 1 lineNos: true lineNumbersInTable: true tabWidth: 4 修改内容区\n1 2 3 cp -r ./themes/hugo-theme-stack/exampleSite/content/categories ./content cp -r ./themes/hugo-theme-stack/exampleSite/content/page ./content cp -r ./themes/hugo-theme-stack/exampleSite/content/_index.zh-cn.md ./content 运行 运行 hugo server。\n初始样子\n修改配置和添加文章后的样子\n文章位置 主题默认在主页输出 content/post 目录下的内容，应该在那个目录新建文章。\n左侧菜单项目 主页，关于，归档，搜索，链接等页面在 content/page/ 目录中有对应的目录。\n把对应目录中的 index.md 复制为 index.zh-cn.md, 然后将 index.zh-cn.md 的 front matter 中的 title 修改成对应的中文标题就让侧边栏显示成中文。\n主题中的图标 主题自带一些来自 Tabler Icons的图标，它们放在 themes/hugo-theme-stack/assets/icons/ 目录中。\n如果要使用自定义图标，把它们放在 assets/icons/ 目录。\nfront matter是什么：\n文章封面 在 front matter 中通过 image 属性定义要使用的封面图片。\nimage: hugo-logo-wide.svg\n这个封面图片放在哪儿？\n或者我们封面使用外链也可以。\n导入字体\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 themes/hugo-theme-stack/assets/scss/style.scss @import url(\u0026#39;https://cdn.jsdelivr.net/npm/lxgw-wenkai-lite-webfont@1.1.0/style.css\u0026#39;); @import url(\u0026#39;https://cdn.jsdelivr.net/npm/@fontsource/cascadia-code@4.2.1/index.min.css\u0026#39;); 修改字体 themes/hugo-theme-stack/assets/scss/variables.scss :root { --sys-font-family: -apple-system, BlinkMacSystemFont, \u0026#34;Segoe UI\u0026#34;, \u0026#34;Droid Sans\u0026#34;, \u0026#34;Helvetica Neue\u0026#34;; --zh-font-family: \u0026#34;PingFang SC\u0026#34;, \u0026#34;Hiragino Sans GB\u0026#34;, \u0026#34;Droid Sans Fallback\u0026#34;, \u0026#34;Microsoft YaHei\u0026#34;; --base-font-family: \u0026#34;Lato\u0026#34;, var(--sys-font-family), var(--zh-font-family), sans-serif; --code-font-family: Menlo, Monaco, Consolas, \u0026#34;Courier New\u0026#34;, monospace; } 代码折叠\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 \u0026lt;!-- 折叠代码 --\u0026gt; \u0026lt;details class=\u0026#34;codefold\u0026#34;\u0026gt; \u0026lt;summary class=\u0026#34;codefold__title\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;codefold__title-text\u0026#34;\u0026gt; \u0026#34; {{ with .Get 0}}{{.}}{{else}}click to expand{{ end }} \u0026#34; \u0026lt;/span\u0026gt; \u0026lt;/summary\u0026gt; {{ .Inner }} \u0026lt;/details\u0026gt; \u0026lt;!-- 样式 --\u0026gt; \u0026lt;style\u0026gt; .codefold { margin: 1.5em 0; border: 1px solid #e9edf3; /* overflow: hidden; */ background-color: #f6f8fa; } .codefold__title { padding: 0.5em 1em; cursor: pointer; user-select: none; background-color: #f6f8fa; } .codefold__title-text { flex: 1; font-size: 1.2em; font-weight: 600; color: rgb(215, 178, 130); text-decoration: 2px underline; } .codefold_tip { font-size: 1.2em; font-weight: 600; color: #6280ad; } \u0026lt;/style\u0026gt; \u0026lt;!-- 使用格式 双括号 百分号 codefold 标题 百分号 双括号 代码 双括号 百分号 /codefold 百分号 双括号 --\u0026gt; 友链三栏 在下面文件夹中的custom.scss中添加后面代码。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 @media (min-width: 1024px) { .article-list--compact.links { display: grid; grid-template-columns: 1fr 1fr 1fr;//三栏 background: none; box-shadow: none; article { background: var(--card-background); border: none; box-shadow: var(--shadow-l2); margin-bottom: 8px; border-radius: 10px; \u0026amp;:nth-child(odd) {//奇数 margin-right: 8px; } } } } 音乐播放器 使用APlayer播放器。\n在partials文件夹下添加music.html：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;!-- require APlayer --\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.css\u0026#34;\u0026gt; \u0026lt;!-- require MetingJS --\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/meting@2.0.1/dist/Meting.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; .aplayer-body { opacity: 0.8; color: #030006; font-weight: 600; box-shadow: 0 2px 10px #5b57ca; border-radius: 20px; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;aplayer\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; const ap = new APlayer({ container: document.getElementById(\u0026#39;aplayer\u0026#39;), fixed: true,//固定到底部 theme: \u0026#39;#e9e9e9\u0026#39;, audio: [ { name: \u0026#39;歌名\u0026#39;, url: \u0026#39;链接\u0026#39;, artist: \u0026#39;歌手名\u0026#39;, cover: \u0026#34;封面地址\u0026#34; }, ] }); \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; 之后，在footer/custom.html中添加{{partial \u0026ldquo;music\u0026rdquo; .}}。\n文章评论 使用Waline，其教程很完整。\n根据Waline教程从头完成到使用Vercel部署完成。\n最后在config.yaml中的waline的serverURL给上你的Vercel服务器地址。\n以及开启评论\ncomments: enabled: true provider: waline\n快速搭建 上面的操作有些儿繁琐，我们可以使用模板快速搭建：CaiJimmy/hugo-theme-stack-starter。\n成果 影麟\n上面博客里的大部分图片都存在了Github，所以你们可能会获取失败。\n参考文章 墨语-Hugo Stack 主题使用方法 建站技术 | 使用 Hugo+Stack 简单搭建一个博客——失迹の博客 （1）带着Stack主题入坑Hugo\n","date":"2024-10-02T00:00:00Z","image":"https://hugo.opendocs.io/images/hugo-logo-wide.svg","permalink":"http://localhost:1313/actions-test/p/hugostack%E4%B8%BB%E9%A2%98%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/","title":"【Hugo】Stack主题的使用记录"},{"content":"如何创建Vue项目\n","date":"2024-10-02T00:00:00Z","image":"https://avatars.githubusercontent.com/u/102173622?v=4","permalink":"http://localhost:1313/actions-test/p/%E5%88%9B%E5%BB%BAvue%E9%A1%B9%E7%9B%AE/","title":"创建Vue项目"},{"content":"Welcome to Hugo theme Stack. This is your first post. Edit or delete it, then start writing!\nFor more information about this theme, check the documentation: https://stack.jimmycai.com/\nWant a site like this? Check out hugo-theme-stack-stater\nPhoto by Pawel Czerwinski on Unsplash\n","date":"2022-03-06T00:00:00Z","image":"http://localhost:1313/actions-test/p/hello-world/cover_hu6307248181568134095.jpg","permalink":"http://localhost:1313/actions-test/p/hello-world/","title":"Hello World"},{"content":"以下是常用的 Git 命令，尤其是在将代码推送到 GitHub 时的常用操作。涵盖了 Git 的基本操作、分支管理、远程仓库操作、合并冲突处理等。\n1. 基础 Git 操作 初始化仓库和克隆仓库 git init\n初始化一个新的 Git 仓库。\ngit clone \u0026lt;repository-url\u0026gt;\n克隆远程仓库到本地。\n查看状态 git status\n查看当前工作区状态（文件是否被修改、是否在暂存区等）。 添加文件到暂存区 git add \u0026lt;file\u0026gt;\n将文件添加到暂存区。\ngit add .\n将所有改动的文件添加到暂存区。\n提交改动 git commit -m \u0026quot;message\u0026quot;\n提交暂存区中的更改到本地仓库，并添加提交信息。\ngit commit --amend\n修改最近一次提交的信息或内容（不建议在已经推送的分支上使用）。\n2. 分支管理 创建和切换分支 git branch \u0026lt;branch-name\u0026gt;\n创建一个新的分支。\ngit checkout \u0026lt;branch-name\u0026gt;\n切换到指定分支。\ngit checkout -b \u0026lt;branch-name\u0026gt;\n创建并切换到一个新分支。\n查看分支 git branch\n列出本地分支。\ngit branch -r\n列出远程分支。\ngit branch -a\n列出所有分支（本地和远程）。\n删除分支 git branch -d \u0026lt;branch-name\u0026gt;\n删除本地分支（分支必须已被合并）。\ngit branch -D \u0026lt;branch-name\u0026gt;\n强制删除本地分支（即使未合并）。\n3. 远程仓库操作 添加远程仓库 git remote add origin \u0026lt;repository-url\u0026gt;\n将远程仓库设置为 origin。 查看远程仓库 git remote -v\n查看当前配置的远程仓库地址。 推送代码到远程仓库 git push origin \u0026lt;branch-name\u0026gt;\n将本地分支推送到远程仓库。\ngit push origin --all\n将所有本地分支推送到远程。\ngit push origin --tags\n推送所有标签到远程仓库。\n拉取远程仓库更新 git pull origin \u0026lt;branch-name\u0026gt;\n从远程仓库拉取最新的更改并与当前分支合并。\ngit fetch origin\n获取远程仓库的最新更改，但不与本地合并。\n4. 合并和冲突处理 合并分支 git merge \u0026lt;branch-name\u0026gt;\n将指定分支合并到当前分支。 解决合并冲突 手动编辑冲突文件后，执行以下命令： git add \u0026lt;conflicted-file\u0026gt;\n标记冲突文件已解决。\ngit commit\n提交合并后的更改。\n放弃合并 git merge --abort\n取消当前的合并操作。 5. 日志与历史记录 查看提交历史 git log\n查看提交历史记录。\ngit log --oneline\n压缩格式显示提交历史（每次提交一行）。\ngit log --graph\n以图形方式显示分支和提交历史。\n查看某个文件的修改历史 git log -p \u0026lt;file\u0026gt;\n查看某个文件的详细修改历史。 6. 撤销操作 撤销修改 git checkout -- \u0026lt;file\u0026gt;\n丢弃某个文件的本地修改，恢复到最近一次提交的状态。 重置暂存区 git reset HEAD \u0026lt;file\u0026gt;\n将文件从暂存区移除，但保留文件的修改。 回滚到某次提交 git reset --hard \u0026lt;commit-hash\u0026gt;\n将仓库回滚到指定的提交，并删除之后的所有更改。\ngit reset --soft \u0026lt;commit-hash\u0026gt;\n回滚到指定的提交，但保留之后的改动，放入暂存区。\n7. 标签管理 创建标签 git tag \u0026lt;tag-name\u0026gt;\n创建一个轻量标签。\ngit tag -a \u0026lt;tag-name\u0026gt; -m \u0026quot;message\u0026quot;\n创建一个带注解的标签。\n查看标签 git tag\n列出所有标签。 推送标签 git push origin \u0026lt;tag-name\u0026gt;\n将某个标签推送到远程仓库。\ngit push origin --tags\n将所有标签推送到远程仓库。\n删除标签 git tag -d \u0026lt;tag-name\u0026gt;\n删除本地标签。\ngit push origin :refs/tags/\u0026lt;tag-name\u0026gt;\n删除远程仓库中的标签。\n8. GitHub 相关命令 Fork 仓库 GitHub 上可以通过点击 Fork 按钮来复制别人的项目到自己的仓库。 克隆 Fork 仓库 git clone https://github.com/\u0026lt;your-username\u0026gt;/\u0026lt;forked-repository\u0026gt;\n将 Fork 的仓库克隆到本地。 拉取原始仓库的更新 git remote add upstream \u0026lt;original-repo-url\u0026gt;\n添加原始仓库为 upstream 远程仓库。\ngit fetch upstream\n拉取原始仓库的更新。\ngit merge upstream/main\n将原始仓库的更改合并到本地。\n创建 Pull Request 通常在 GitHub 界面上点击 New Pull Request 来提交更改请求。 9. Stash (储藏) 储藏未提交的更改 git stash\n储藏当前未提交的更改。\ngit stash list\n查看储藏的更改列表。\ngit stash apply\n应用最近的储藏。\ngit stash pop\n应用最近的储藏并从储藏列表中移除。\n10. 其他有用命令 显示远程仓库 URL git remote show origin\n显示远程仓库详细信息，包括 URL 和当前跟踪的分支。 比较差异 git diff\n显示未暂存的改动。\ngit diff --staged\n显示已暂存但未提交的改动。\n以上命令涵盖了大部分日常开发中与 Git 和 GitHub 相关的操作。希望这些命令能帮助你更好地管理代码和项目。\n","date":"2024-10-04T00:00:00Z","image":"http://localhost:1313/actions-test/p/git-operate/gitlogo_hu300927998262818577.jpeg","permalink":"http://localhost:1313/actions-test/p/git-operate/","title":"Git Operate"},{"content":"TypeScript是什么呢？ TypeScript用来约束js在某些方面太动态了，比如变量没有类型。TS 以JS为基础构建的语言，TS扩展了JavaScript并添加了类型，TS不能被JS解析器直接执行，需要TS-\u0026gt;编译-\u0026gt;JS；\n安装TypeScript 搭建TypeScript开发坏境 下载node.js 安装node.js 使用npm全局安装typescript 进入命令行npm i -g typescript安装成功： image.png 4. 使用TS 新建.ts文件，然后需要编译为.js文件\nimage.png 在文件夹下面多出一个.js文件\nimage.png\nTypeScript语法\n基本类型 对变量或者函数参数以及返回值都可以指定类型，有很多种类型，其中注意any unknown类型的区别，unknown是安全的any类型，不会影响别的变量； P4；\n对象属性指定\n1 2 3 4 5 6 7 /*=========对象属性指定============*/ //对象b必须有name属性 属性后面？表示可选 没有其他没指定的属性 let b:{name:string,age?:number}; //表示对象除了指定的name 还有其他类型的属性都行 let c:{name:string,[propName:string]:any}; c={name:\u0026#39;猪八戒\u0026#39;,age:13}; 2. 函数结构指定 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 /*==========函数结构指定============*/ //指定函数相关 参数返回参数 即定义函数结构 let d:(a:number,b:number)=\u0026gt;number 3. 数组类型声明 /*=========数组类型声明============*/ //数组 string[]表示字符串数组 let e:string[]; e=[\u0026#39;pink\u0026#39;,\u0026#39;a\u0026#39;]; let g:Array\u0026lt;number\u0026gt;; g=[1,2,3]; 4. 使用元组 /* * 元组,元组就是固定长度的数组 语法：[类型，类型，类型]长度为3 */ let h:[string,string]; h=[\u0026#39;hello\u0026#39;,\u0026#39;world\u0026#39;] 4. enum枚举 /*==============enum枚举==============*/ // 把所有可能情况独列出来 enum Gender{ Male=0, Female=1, } let i:{name:string,gender:Gender}; i={ name:\u0026#39;随悟空\u0026#39;, gender:Gender.Male } 5. \u0026amp; // \u0026amp;表示同时 let j:{name:string}\u0026amp;{age:number}; j={name:\u0026#39;孙悟空\u0026#39;,age:13}; 5. 类型别名 //类型别名 type myType=string; type myType2=1|2|3|4; let k:myType2; let l:myType2; let m:myType; m=\u0026#39;string\u0026#39;; 以上的这些类型多写多用就记住了。\nTypeScript的tsconfig.json配置文件 参考 tsc \u0026ndash;init生成tsconfig.json配置文件，里面的属性分别什么意思使用到的时候自己查询；P9\nTypeSCript的webpack打包使用 首先使用npm init -y初始化项目 下载一些包 npm i -D webpack webpack-cli typescript ts-loader,tsc \u0026ndash;init 然后配置webpack.config.js文件，配置过程中遇到问题，webpack可能版本过高然后导致一些报错，比如在一些新的版本不需要手动设置入口文件，但是我去掉入口文件之后任然报错； 检擦发现文件路径有问题，src webpack.config.js不在part3文件夹下面一定要注意路径的正确性， image.png 框里面的都是同一层的，然后在part3下面npm run build 自动生成html文件插件安装 npm i -D html-webpack-plugin在webpack.config.js中配置plugins\n1 2 3 4 plugins: [ new HTMLWebpackPlugin(), ] 再次运行npm run build可以在dist下面直接生成引用bundle.js的index.html文件，也可以在src下面提供一个index.html模板，在webpack.config.js下面配置;\n1 2 3 new HTMLWebpackPlugin({ template: \u0026#39;./src/index.html\u0026#39; }), 还需要下载自动刷新即热更新，安装：npm i -D webpack-dev-server 然后还是要在package.json文件里面配置\n1 \u0026#34;start\u0026#34;: \u0026#34;webpack serve --open\u0026#34; 然后npm start,自动打开index.html文件，更新index.ts文件测试； 安装插件npm i -D clean-webpack-plugin 删除旧的dist目录，同样需要配置：\nplugins: [ new CleanWebpackPlugin(), \u0026hellip; ], 指定哪些文件允许作为模块引入：\nresolve: { extensions: [\u0026rsquo;.ts\u0026rsquo;, \u0026lsquo;.js\u0026rsquo;] } babel使用解决兼容性问题； 安装npm i -D @babel/core @babel/preset-env babel-loader core-js 进行配置：use里面写入，其中corejs是当ie没有promise这种东西的时候corejs把自己实现的代码引入给他使用，usage表示按需引入； //配置babel { //指定加载器 loader: \u0026ldquo;babel-loader\u0026rdquo;, //设置babel //设置预定义的坏境 options: { presets: [ [ //指定坏境插件 \u0026ldquo;@babel/preset-env\u0026rdquo;, //配置信息 { //targets指定兼容的浏览器版本 corejs指定corejs版本在\n//package.json里面看corejs版本 targets: { \u0026ldquo;chrome\u0026rdquo;: \u0026ldquo;58\u0026rdquo;, \u0026ldquo;ie\u0026rdquo;: \u0026ldquo;11\u0026rdquo;, }, \u0026ldquo;corejs\u0026rdquo;: \u0026ldquo;3\u0026rdquo;, \u0026ldquo;useBuiltIns\u0026rdquo;: \u0026ldquo;usage\u0026rdquo; } ] ] } }, \u0026hellip; 面向对象简介 类简介\n面向对象简介 简单说就是程序中所有操作都需要通过操作对象完成：比如 操作浏览器要使用window对象 操作网页要使用document对象 操作控制台要使用console.log对象 tsc -w 实现自动编译\n面向类简介 类\u0026ndash;》对象\u0026mdash;-》模型 总体上这些都是和js一样的，ES6的继承extends super关键字调用父类，抽象类 在前面加关键字：abstract，每个文件使用立即函数，防止变量的冲突，立即函数相当于创建了单独的函数域。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 (function(){ // 禁止一个类被用来创建对象 抽象类是用来继承的 //抽象类中可以添加抽象方法 abstract class Animal{ name:string; constructor(name:string){ this.name=name; } //抽象方法 子类必须重写抽象方法 abstract sayHello():void; } class Dog extends Animal{ sayHello(){ console.log(\u0026#39;汪汪\u0026#39;); } } const dog=new Dog(\u0026#39;旺财\u0026#39;); dog.sayHello(); })(); 禁止类用来创建对象就是用abstract 抽象类，专门用来继承。抽象方法只能定义在抽象类中，子类必须对抽象方法进行重写。\n接口 接口简单理解就是对一些类型的规定，类似于type myType但是又有区别，接口可以重复定义： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 // 接口定义一个类结构 interface myInterface { name: string; age: number; } // interface可以重复定义 interface myInterface { gender: string; } //接口的使用 const obj: myInterface = { name: \u0026#39;ddd\u0026#39;, age: 222, gender: \u0026#39;man\u0026#39;, } 接口可以定义类的时候限制类的结构 接口中的所有属性都不能有实际值 接口只定义对象的结构 不考虑实际值 比如用接口去实现一个类，其实就是用接口对类做了一些规范\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 interface myInter { name: string; sayHello():void; } // 定义类时 可以使用类去实现一个接口 实现接口就是使类满足接口的要求 //接口就是对类的限制 class MyClass implements myInter { name: string; constructor(name: string) { this.name = name; } sayHello() { console.log(\u0026#39;Hello~~~\u0026#39;); } } 属性的封装 属性的封装主要是对属性进行私有化，使得外部不能轻易的改变属性值。 通过关键字来定义私有属性 public 修饰的属性可以在任意位置访问 private 私有属性 私有属性只能在当前类内部进行访问 protected 只能在当前类和继承当前类的类中访问 可以通过在类中添加方法使得私有属性被外部访问 js红宝书有讲怎么访问私有属性可以参考 getter方法用来读取属性 setter方法用来设置属性\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 class Person { private _name: string; private _age: number; constructor(name: string,age: number){ this._name = name; this._age = age; } // 定义方法用来获取name属性 也可以使用get set 保持属性的使用习惯 getName() { return this._name; } setName(value: string) { this._name = value; } set age(value: number) { this._age = value\u0026gt;0?value: this._age; } } const per = new Person(\u0026#39;孙悟空\u0026#39;,21); console.log(per.getName()); per.setName(\u0026#39;猪八戒\u0026#39;); per.age=12; console.log(per); // 下面的写法等价于上面的this的写法 class C { constructor(public name: string, public age: number){ } } 5. 泛型 当类型不明确的时候可以使用泛型比如： function fn\u0026lt;k\u0026gt;(a:k):k { return a; } 上面里面的k就表示类型，在使用的时候才确定类型， fn(10);//表示泛型为number let result2 = fn\u0026lt;string\u0026gt;(\u0026#39;hello\u0026#39;);//表示指定泛型 为 string \u0026lt;\u0026gt;里面也可以有两个泛型比如： function fn2\u0026lt;T,K\u0026gt;(a:T,b:K):T{ console.log(b); return a; } fn2\u0026lt;number,string\u0026gt;(123,\u0026#39;hello\u0026#39;); 泛型还可以结合接口使用比如： interface Inter { length: number; } //表示泛型T必须是Inter实现类 //1 function fn3\u0026lt;T extends Inter\u0026gt; (a:T) { return a.length; } //2 class MyClass2\u0026lt;T\u0026gt;{ name: T; constructor(name: T){ this.name = name; } } ","date":"2024-10-03T00:00:00Z","permalink":"http://localhost:1313/actions-test/p/typescript%E4%BD%BF%E7%94%A8%E7%AE%80%E6%98%93%E6%B5%81%E7%A8%8B/","title":"TypeScript使用简易流程"},{"content":"记录搭建Hugo 博客，使用stack主题快速启动部署 记录搭建Hugo 博客，使用stack主题快速启动部署\n选择Hugo Hugo 比较偏向后端，编译速度非常快，就这么简单。\n简单记录一下过程 首要任务是选择一个简单好看的主题：hugo-theme-stack\n这个主题最初是在V2EX 看到的，挺小清新的，符合现代审美。然后在Hugo的官方主题商店看到了它。\n看起来主题的亮色模式有点太白了，有些文字看得不是很清楚，后面再想办法调整一下。\n一开始看Hugo官方文档使用命令行新建一个Hugo项目再添加这个主题，因为有一些设置覆盖，一直没弄好，后面参考文档直接使用了这个主题的快速入门模板项目， 直接拉下来，调整配置直接运行起来了，目前使用项目自带的GitHub Action地配置搭配了一个二级域名部署在了GitHub Page上了。\n接下来仔细说说自己做了那些事，改了哪些东西。因为没有参考任何的教程，查找地相关教程都比较笼统，没有针对这个主题的教程，所以下面的内容全都是自己折腾实验的。\n改配置 快速启动模板的GitHub 地址：\nCaiJimmy/hugo-theme-stack-starter\ngit clone https://github.com/CaiJimmy/hugo-theme-stack-starter\n先把代码拉下来，所有的配置文件都在/config/_default 文件夹内，配置文件有很多，自己修改了其中个别几个，下面详细讲讲。\nconfig.toml 博客的基本信息\n标题，用户名，部署的域名，语言\nbaseurl = \u0026ldquo;https://blog.tuwei.space\u0026rdquo; languageCode = \u0026ldquo;zh-Hans\u0026rdquo; paginate = 5 title = \u0026ldquo;koala9527的博客\u0026rdquo;\nDefaultContentLanguage = \u0026ldquo;zh-cn\u0026rdquo;\nhasCJKLanguage = false\nChange it to your Disqus shortname before using disqusShortname = \u0026ldquo;koala9527\u0026rdquo; menu.toml 博客菜单\n删掉了Twitter联系方式，更改GitHub地址，没有什么拿得出手的，就留这个吧。\n[[social]] identifier = \u0026ldquo;github\u0026rdquo; name = \u0026ldquo;GitHub\u0026rdquo; url = \u0026ldquo;https://github.com/koala9527\"\n[social.params] icon = \u0026ldquo;brand-github\u0026rdquo; params.toml 杂项，很多配置，没有仔细研究\n我只改了两项，个性签名和头像。\n[sidebar] emoji = \u0026quot; \u0026quot; subtitle = \u0026ldquo;悟已往者不谏,知来者知可追\u0026rdquo;\n[sidebar.avatar] enabled = true local = true src = \u0026ldquo;img/avatar.jpg\u0026rdquo;\n这里需要注意的是头像的文件位置，需要在项目根目录新建一个assets/img文件夹，把头像的图片文件放进去，官方文档是这么说的：\n部署 先要在GitHub 新建一个公开的项目，我的自己项目地址： koala9527/my-hugo-blog\n此时需要注意推送的分支需要和快速启动模板内.github/deploy.yml文件的CI触发的分支一致。\n我一开始没看见注意使用的是main这个名字，项目中的出发分支名称是master无法触发自动部署。\nimg.png\n接着把本地修改的内容全部提交到刚刚新建的Github仓库，注意分支，Git仓库会触发Github Action自动新建一个gh-page的分支，会自动把content文件夹里面的内容编译到一个public文件夹，一个纯前端文件的项目，这个gh-page分支的内容就是public文件夹的内容。\n目前的项目的目录结构：\n解析域名 点击项目的Settings-\u0026gt;pages\n设置部署构建来源设置成来自分支\n分支名称为gh-pages\n然后再设置一个自定义域名\n设置域名过后需要在域名DNS服务商设置DNS解析。\n上面是是Git账号的域名解析，不确定是不是必须的，在账号设置下的page菜单中添加，添加过后会提示需要一个TXT类型域名解析用来 验证域名的所有权。\n下面是项目的自定义域名解析，是一个二级域名，二级域名记录为blog，解析内容为http://koala9527.github.io ,记录类型为CNAME,koala9527为我自己的Github名称。\n到此为止，整个博客的从零开始到上线部署就完成了。\n写在最后 GitHub的访问貌似有一点慢，后面考虑部署到CDN上面吧，静态页面博客部署，访问，迁移非常地方便快速，这些优点就非常明显！\n","date":"2024-10-02T00:00:00Z","permalink":"http://localhost:1313/actions-test/p/hugo-stack-quick-start/","title":"Hugo Stack Quick Start"},{"content":"这里写关于nodejs的学习\n","date":"2024-10-02T00:00:00Z","permalink":"http://localhost:1313/actions-test/p/nodejs/","title":"NodeJs"},{"content":"这里写关于React的学习\n","date":"2024-10-02T00:00:00Z","permalink":"http://localhost:1313/actions-test/p/react/","title":"React"},{"content":"这里写关于Spring的学习\n","date":"2024-10-02T00:00:00Z","permalink":"http://localhost:1313/actions-test/p/spring/","title":"Spring"},{"content":"目录\n一、介绍 二、环境搭建（hello world） 2.1 下载HBuilderX 2.2 下载微信开发者工具 2.3 创建uniapp项目 2.4 在浏览器运行 2.5 在微信开发者工具运行 2.6 在手机上运行 三、项目基本目录结构 四、开发规范概述 五、全局配置文件（pages.json） 5.1 globalStyle（全局样式） 导航栏：背景颜色、标题颜色、标题文本\n导航栏：开启下拉刷新、下拉背景、下拉样式\n5.2 pages（页面路由） 5.3 tabBar 5.4 condition （开发启动模式） 六、创建新页面和页面的配置 七、配置tabBar 7.1 基本设置 7.2 个性化设置 八、组件 8.1 text 8.2 icon icon\n字体图标\n九、页面样式与布局 9.1 尺寸单位 9.2 样式导入 9.3 选择器 9.4 全局样式与局部样式 9.5 使用sass 十、Vue基本语法复习 十一、uniapp的生命周期 应用的生命周期 页面的生命周期 十二、下拉刷新 十三、上拉加载 十四、网络请求 14.1 uni.request(OBJECT) 14.2 二次封装请求对象 十五、数据缓存 15.1 uni.setStorage(OBJECT) 15.2 uni.getStorage(OBJECT) 15.3 uni.removeStorage(OBJECT) 15.4 uni.setStorageSync(KEY,DATA) 15.5 uni.getStorageSync(KEY) 15.6 uni.removeStorageSync(KEY) 十六、图片的上传和预览 16.1 上传 一、介绍 如果是刚入门小程序的，又或者刚听到这个名词的人，可能跟我之前一样，带着诸多的疑惑。比如：\n什么是uniapp？它和原生微信小程序有什么异同之处？\n为什么推荐uniapp开发？\n这里一句话两句话解释了可能还是云里雾里的。我的建议是看看下面这个视频，个人觉得讲的很清楚明白。\n开发微信小程序使用原生开发还是uniapp开发，详细介绍原生小程序与uni-app开发的优缺点_哔哩哔哩_bilibili\n二、环境搭建（hello world） 2.1 下载HBuilderX HBuilderX-高效极客技巧\n当然你可以选择其他IDE，但是官网推荐HBuilderX，天然整合uniapp。\n2.2 下载微信开发者工具 我们要最终打包成微信小程序就必须在微信开发者工具去预览，那么需要下载微信开发者工具了。\n微信开发者工具下载地址与更新日志 | 微信开放文档\n2.3 创建uniapp项目 HBuilderX下载下来后，直接双击运行HBuilderX.exe文件即可，它是免安装的。\n然后我们新建一个uniapp项目，按照下图操作即可。\n然后它会默认生成项目的基本结构。\n2.4 在浏览器运行\n然后第一次运行时，控制台会提示自动去下载相关的插件，下载完成后需要你再次重新运行。\n2.5 在微信开发者工具运行\n然后启动测试一下，发现失败了。经过检查它报错的这两项，也没问题啊。\n那么问题可能是出在微信开发者，我们需要进入微信开发者工具-\u0026gt;设置-\u0026gt;安全，然后把服务的端口号打开。\n接着重新运行即可。\n2.6 在手机上运行 安卓、ios同理，不过需要用数据线连接上。\n操作类似，感兴趣的可以去试试，这里不再演示了。不过要注意的是ios端麻烦点，好像现在不支持直接运行了。\n三、项目基本目录结构 四、开发规范概述 为了实现多端兼容，综合考虑编译速度、运行性能等因素，uni-app约定了如下开发规范：\n页面文件遵循Vue单文件组件规范\n组件标签靠近小程序规范，详细见uni-app组件规范\n接口能力（js api）靠近微信小程序规范，但需将前缀wx替换为uni，详见uni-app接口规范\n数据绑定及事件处理同Vue.js规范，同时补充了App以及页面的生命周期\n为兼容多端运行，建议使用flex布局进行开发\n五、全局配置文件（pages.json） pages.json 文件用来对 uni-app 进行全局配置，决定页面文件的路径、窗口样式、原生的导航栏、底部的原生tabbar 等。\n5.1 globalStyle（全局样式） 用于设置应用的状态栏、导航条、标题、窗口背景色等。\nps：以下我都只列举了个人认为比较常见的属性，如果有需要强烈建议去官网看，最全。\n导航栏：背景颜色、标题颜色、标题文本 属性\t类型\t默认值\t描述\t平台差异说明 navigationBarBackgroundColor\tHexColor\t#F8F8F8\t导航栏背景颜色（同状态栏背景色）\tAPP与H5为#F8F8F8，小程序平台请参考相应小程序文档 navigationBarTextStyle\tString\tblack\t导航栏标题颜色及状态栏前景颜色，仅支持 black/white\t支付宝小程序不支持，请使用 my.setNavigationBar navigationBarTitleText\tString\t导航栏标题文字内容 navigationStyle\tString\tdefault\t导航栏样式，仅支持 default/custom。custom即取消默认的原生导航栏，需看使用注意\t微信小程序 7.0+、百度小程序、H5、App（2.0.3+） 演示\n注意：如果你没有修改完全成功，或者都不生效，可能是设置了页面的配置样式导致的，它会覆盖掉全局样式配置中相同属性的样式。这是因为页面配置优先级高于全局配置。我们删除掉页面配置样式即可。\n导航栏：开启下拉刷新、下拉背景、下拉样式 属性\t类型\t默认值\t描述\t平台差异说明 backgroundColor\tHexColor\t#ffffff\t下拉显示出来的窗口的背景色\t微信小程序 backgroundTextStyle\tString\tdark\t下拉 loading 的样式，仅支持 dark / light\t微信小程序 enablePullDownRefresh\tBoolean\tfalse\t是否开启下拉刷新，详见页面生命周期。 onReachBottomDistance\tNumber\t50\t页面上拉触底事件触发时距页面底部距离，单位只支持px，详见页面生命周期 演示\n5.2 pages（页面路由） uni-app 通过 pages 节点配置应用由哪些页面组成，pages 节点接收一个数组，数组每个项都是一个对象，其属性值如下：\n属性\t类型\t默认值\t描述 path\tString\t配置页面路径 style\tObject\t配置页面窗口表现，配置项参考下方 pageStyle Tips：\npages节点的第一项为应用入口页（即首页） 应用中新增/减少页面，都需要对 pages 数组进行修改 文件名不需要写后缀，框架会自动寻找路径下的页面资源 例如项目创建时默认生成的：\n如果不清楚，我将在第六章创建新页面和页面的配置中演示它的使用。\n5.3 tabBar 如果应用是一个多 tab 应用，可以通过 tabBar 配置项指定一级导航栏，以及 tab 切换时显示的对应页。\n具体请见第七章！\n5.4 condition （开发启动模式） 启动模式配置，仅开发期间生效，用于模拟直达页面的场景，如：小程序转发后，用户点击所打开的页面。\n属性说明：\n属性\t类型\t是否必填\t描述 current\tNumber\t是\t当前激活的模式，list节点的索引值 list\tArray\t是\t启动模式列表 list说明：\n属性\t类型\t是否必填\t描述 name\tString\t是\t启动模式名称 path\tString\t是\t启动页面路径 query\tString\t否\t启动参数，可在页面的 onLoad 函数里获得 注意： 在 App 里真机运行可直接打开配置的页面，微信开发者工具里需要手动改变编译模式。\n演示\n再创建一个测试页测试一下\n配置condition条件：\n六、创建新页面和页面的配置 可以直接新建页面，也可以先创建目录，再创建文件。\n然后去pages.json文件中设置页面路径，同时也可以配置一下页面样式。\n完成，我们先通过浏览器打开看看，输入该路径即可看到刚刚创建的页面。\n而且发现它成功覆盖了全局样式的导航栏标题文字。\n七、配置tabBar 7.1 基本设置 Tips\n当设置 position 为 top 时，将不会显示 icon tabBar 中的 list 是一个数组，只能配置最少2个、最多5个 tab，tab 按数组的顺序排序。 tabbar 切换第一次加载时可能渲染不及时，可以在每个tabbar页面的onLoad生命周期里先弹出一个等待雪花（hello uni-app使用了此方式） tabbar 的页面展现过一次后就保留在内存中，再次切换 tabbar 页面，只会触发每个页面的onShow，不会再触发onLoad。 顶部的 tabbar 目前仅微信小程序上支持。需要用到顶部选项卡的话，不建议使用 tabbar 的顶部设置，而是自己做顶部选项卡，可参考 hello uni-app-\u0026gt;模板-\u0026gt;顶部选项卡。 属性\t类型\t必填\t默认值\t描述\t平台差异说明 color\tHexColor\t是\ttab 上的文字默认颜色 selectedColor\tHexColor\t是\ttab 上的文字选中时的颜色 backgroundColor\tHexColor\t是\ttab 的背景色 borderStyle\tString\t否\tblack\ttabbar 上边框的颜色，可选值 black/white，也支持其他颜色值\tApp 2.3.4+ 、H5 3.0.0+ list\tArray\t是\ttab 的列表，详见 list 属性说明，最少2个、最多5个 tab position\tString\t否\tbottom\t可选值 bottom、top top 值仅微信小程序支持\nlist属性的属性值如下\n属性\t类型\t必填\t说明\t平台差异 pagePath\tString\t是\t页面路径，必须在 pages 中先定义 text\tString\t是\ttab 上按钮文字，在 App 和 H5 平台为非必填。例如中间可放一个没有文字的+号图标 iconPath\tString\t否\t图片路径，icon 大小限制为40kb，建议尺寸为 81px * 81px，当 position 为 top 时，此参数无效，不支持网络图片，不支持字体图标 selectedIconPath\tString\t否\t选中时的图片路径，icon 大小限制为40kb，建议尺寸为 81px * 81px ，当 position 为 top 时，此参数无效 演示\n7.2 个性化设置 我们看到很多小程序，它的底部导航栏很多都有哪种中间图标突起的，例如这样：\n它是怎么做到的呢？\n其实也是tabbar里面的配置项，midButton属性，和list属性评级即可。\n属性\t类型\t必填\t默认值\t描述\t平台差异说明 midButton\tObject\t否\t中间按钮 仅在 list 项为偶数时有效\tApp 2.3.4+、H5 3.0.0+ midButton 属性说明\n属性\t类型\t必填\t默认值\t描述 width\tString\t否\t80px\t中间按钮的宽度，tabBar 其它项为减去此宽度后平分，默认值为与其它项平分宽度 height\tString\t否\t50px\t中间按钮的高度，可以大于 tabBar 高度，达到中间凸起的效果 text\tString\t否\t中间按钮的文字 iconPath\tString\t否\t中间按钮的图片路径 iconWidth\tString\t否\t24px\t图片宽度（高度等比例缩放） backgroundImage\tString\t否\t中间按钮的背景图片路径 iconfont\tObject\t否\t字体图标，优先级高于 iconPath 具体代码如下：\n它有个特点，就是目前只支持app、H5，也就是说小程序这些是无法展示的。\n且midButton没有pagePath，需监听点击事件，自行处理点击后的行为逻辑。\n具体可查阅官网：pages.json 页面路由 | uni-app官网\n如果我们希望小程序端也有这个功能怎么办呢？其实可以自定义tabbar，把原生的tabbar隐藏掉。\n具体实现这里就不写了，稍微有些复杂。感兴趣后面自己再搜索相关方法。官网也有相关介绍：pages.json 页面路由 | uni-app官网\n当然你也可以去uniapp插件市场搜索人家弄好的插件，这样更简单一点，跟着要求一步一步调整即可。\n后续有时间，我也会专门补充如何自定义设置tabbar。\n八、组件 组件是视图层的基本组成单元。 组件是一个单独且可复用的功能模块的封装。 直白讲，就是标签。uniapp中除了可以使用html提供的默认标签外，uniapp还封装了一些组件可以使用。\n8.1 text 文本组件。用于包裹文本内容。\n属性说明\n属性名\t类型\t默认值\t说明\t平台差异说明 selectable\tBoolean\tfalse\t文本是否可选 user-select\tBoolean\tfalse\t文本是否可选\t微信小程序 space\tString\t显示连续空格\t钉钉小程序不支持 decode\tBoolean\tfalse\t是否解码\t百度、钉钉小程序不支持 space 值说明\n值\t说明 ensp\t中文字符空格一半大小 emsp\t中文字符空格大小 nbsp\t根据字体设置的空格大小\n8.2 icon icon 图标\n属性说明\n属性名\t类型\t默认值\t说明 type\tString\ticon的类型 size\tNumber\t23\ticon的大小，单位px color\tColor\ticon的颜色，同css的color 各平台 type 有效值说明：\n平台\ttype 有效值 App、H5、微信小程序、QQ小程序\tsuccess, success_no_circle, info, warn, waiting, cancel, download, search, clear 支付宝小程序\tinfo, warn, waiting, cancel, download, search, clear, success, success_no_circle,loading 百度小程序\tsuccess, info, warn, waiting, success_no_circle, clear, search, personal, setting, top, close, cancel, download, checkboxSelected, radioSelected, radioUnselect 演示\n由于 icon 组件各端表现存在差异，可以通过使用 字体图标 的方式来弥补各端差异。\n字体图标 另外，uniapp默认提供的图标就这些，如果希望使用个性化的图标，那么就可以使用字体图标。\nuniapp 支持使用字体图标，使用方式与普通 web 项目相同，需要注意以下几点：\n支持 base64 格式字体图标。 支持网络路径字体图标。 小程序不支持在 css 中使用本地文件，包括本地的背景图和字体文件。需以 base64 方式方可使用。 网络路径必须加协议头 https。 从 http://www.iconfont.cn 上拷贝的代码，默认是没加协议头的。 从 http://www.iconfont.cn 上下载的字体文件，都是同名字体（字体名都叫 iconfont，安装字体文件时可以看到），在 nvue 内使用时需要注意，此字体名重复可能会显示不正常，可以使用工具修改。 使用本地路径图标字体需注意： 为方便开发者，在字体文件小于 40kb 时，uni-app 会自动将其转化为 base64 格式； 字体文件大于等于 40kb，仍转换为 base64 方式使用的话可能有性能问题，如开发者必须使用，则需自己将其转换为 base64 格式使用，或将其挪到服务器上，从网络地址引用； 字体文件的引用路径推荐使用以 ~@ 开头的绝对路径。 话不多说，我们直接演示\n除了html页面其他都复制到项目中，按照如下步骤即可：\nok，这样就算配置完成了，我们就可以在页面中使用了。\n然后我们打开下载下来的文件中的html页面，找到图标对应的字体样式进行使用，使用时去掉前面的 . 号。\n字体图标的颜色、大小等，我们也可以通过css样式去改变。\n问题\n有时候你会发现你完全按照我的步骤做的，结果在浏览器中可以使用，但是小程序中使用无法显示，且控制台还报错。这个时候要么换种资源，要么去调整一下使用https开头的网络资源。具体的问题具体解决就好了。\n九、页面样式与布局 uni-app 的 css 与 web 的 css 基本一致。\nuni-app 有 vue 页面和 nvue 页面。vue 页面是 webview 渲染的、app 端的 nvue 页面是原生渲染的。在 nvue 页面里样式比 web 会限制更多。\n本文重点介绍 vue 页面的样式注意事项。\n9.1 尺寸单位 uni-app 支持的通用 css 单位包括 px、rpx。\nrpx即响应式px，一种根据屏幕宽度自适应的动态单位，以750宽的品目为基准，750rpx恰好为屏幕宽度，屏幕变宽，rpx实际显示效果会等比放大。\n9.2 样式导入 使用@import语句可以导入外联样式表，@import后跟需要导入的外联样式表的相对路径，用 ; 表示语句结束。\n9.3 选择器 目前支持的选择器有：\n选择器\t样例\t样例描述 .class\t.intro\t选择所有拥有 class=\u0026ldquo;intro\u0026rdquo; 的组件 #id\t#firstname\t选择拥有 id=\u0026ldquo;firstname\u0026rdquo; 的组件 element\tview\t选择所有 view 组件 element, element\tview, checkbox\t选择所有文档的 view 组件和所有的 checkbox 组件 ::after\tview::after\t在 view 组件后边插入内容，仅 vue 页面生效 ::before\tview::before\t在 view 组件前边插入内容，仅 vue 页面生效 注意：\n在 uni-app 中不能使用 * 选择器。\n微信小程序自定义组件中仅支持 class 选择器\npage 相当于 body 节点，例如：\npage { background-color: #ccc; } 9.4 全局样式与局部样式 定义在 App.vue 中的样式为全局样式，作用于每一个页面。在 pages 目录下 的 vue 文件中定义的样式为局部样式，只作用在对应的页面，并会覆盖 App.vue 中相同的选择器。\n注意：\nApp.vue 中通过 @import 语句可以导入外联样式，一样作用于每一个页面。 nvue 页面暂不支持全局样式 9.5 使用sass 我们在项目根目录下，可以看到一个 uni-scss文件。\nuni-scss 是 uni-ui提供的一套全局样式 ，通过一些简单的类名和sass变量，实现简单的页面布局操作，比如颜色、边距、圆角等。\n那么如何使用sass呢？\n首先安装sass插件\n使用，记得在style标签中加上属性 lang=\u0026ldquo;scss\u0026rdquo;\n十、Vue基本语法复习 uniapp是基于vue进行封装的框架。所以要像使用好它，必须会vue。如果你会vue，那么可以跳过这里不看，如果你不会，那么我会简单跟大家一起学习一下。\n获取事件对象\n如果v-on:中方法没有传参数，那么默认拿到的是事件对象\n只需要在方法上传一个形参即可。\n十一、uniapp的生命周期 应用的生命周期 App.vue/App.uvue | uni-app官网\n生命周期的概念\n一个对象从创建、运行、销毁的整个过程。\n生命周期函数\n在生命周期中每个阶段会伴随着函数的触发，这些函数被称为生命周期函数。\nuni-app支持如下应用生命周期函数\n函数名\t说明 onLauch\t当uni-app初始化完成时触发（全局只触发一次） onShow\t当uni-app启动，或从后台进入前台显示 onHide\t当uni-app从前台进入后台 onError\t当uni-app报错时触发\n页面的生命周期 页面简介 | uni-app官网\nuni-app 支持如下页面生命周期函数：\n函数名\t说明\t平台差异说明\t最低版本 onInit\t监听页面初始化，其参数同 onLoad 参数，为上个页面传递的数据，参数类型为 Object（用于页面传参），触发时机早于 onLoad\t百度小程序\t3.1.0+ onLoad\t监听页面加载，其参数为上个页面传递的数据，参数类型为 Object（用于页面传参），参考示例\tonShow\t监听页面显示。页面每次出现在屏幕上都触发，包括从下级页面点返回露出当前页面\tonReady\t监听页面初次渲染完成。注意如果渲染速度快，会在页面进入动画完成前触发\tonHide\t监听页面隐藏\tonUnload\t监听页面卸载\tonResize\t监听窗口尺寸变化\tApp、微信小程序、快手小程序 onPullDownRefresh\t监听用户下拉动作，一般用于下拉刷新，参考示例\tonReachBottom\t页面滚动到底部的事件（不是scroll-view滚到底），常用于下拉下一页数据。具体见下方注意事项\tonTabItemTap\t点击 tab 时触发，参数为Object，具体见下方注意事项\t微信小程序、QQ小程序、支付宝小程序、百度小程序、H5、App、快手小程序、京东小程序\n我们最小化页面，然后打开\n我们从tabBar切换，也是一样的道理。\n十二、下拉刷新 前面讲过下拉刷新的一种方式，是通过全局配置。\n但是我们不推荐，我们希望那个页面有需要就开启，没有需要不要开启。\n我们希望下拉刷新了触发一些事件\n只需要通过onPullDownRefresh函数即可。在前面页面的生命周期函数中有列举过。\n一旦刷新完成之后，我们就可以通过uni.stopPullDownRefresh();关闭\n十三、上拉加载 我们发现还没有触底就开始说触底了，这是因为有默认的触底距离 。我们可以设置默认触底距离\n然后再来测试一下就好了。这里不演示了。\n触底之后，我们可以给他加载下一页数据。\n十四、网络请求 uni.request(OBJECT) | uni-app官网\n14.1 uni.request(OBJECT) 发起网络请求。\n在各个小程序平台运行时，网络相关的 API 在使用前需要配置域名白名单。\nOBJECT 参数说明\n参数名\t类型\t必填\t默认值\t说明\t平台差异说明 url\tString\t是\t开发者服务器接口地址 data\tObject/String/ArrayBuffer\t否\t请求的参数\tApp 3.3.7 以下不支持 ArrayBuffer 类型 header\tObject\t否\t设置请求的 header，header 中不能设置 Referer\tApp、H5端会自动带上cookie，且H5端不可手动修改 method\tString\t否\tGET\t有效值详见下方说明 timeout\tNumber\t否\t60000\t超时时间，单位 ms\tH5(HBuilderX 2.9.9+)、APP(HBuilderX 2.9.9+)、微信小程序（2.10.0）、支付宝小程序 dataType\tString\t否\tjson\t如果设为 json，会尝试对返回的数据做一次 JSON.parse responseType\tString\t否\ttext\t设置响应的数据类型。合法值：text、arraybuffer\t支付宝小程序不支持 sslVerify\tBoolean\t否\ttrue\t验证 ssl 证书\t仅App安卓端支持（HBuilderX 2.3.3+），不支持离线打包 withCredentials\tBoolean\t否\tfalse\t跨域请求时是否携带凭证（cookies）\t仅H5支持（HBuilderX 2.6.15+） firstIpv4\tBoolean\t否\tfalse\tDNS解析时优先使用ipv4\t仅 App-Android 支持 (HBuilderX 2.8.0+) enableHttp2\tBoolean\t否\tfalse\t开启 http2\t微信小程序 enableQuic\tBoolean\t否\tfalse\t开启 quic\t微信小程序 enableCache\tBoolean\t否\tfalse\t开启 cache\t微信小程序、字节跳动小程序 2.31.0+ enableHttpDNS\tBoolean\t否\tfalse\t是否开启 HttpDNS 服务。如开启，需要同时填入 httpDNSServiceId 。 HttpDNS 用法详见 移动解析HttpDNS\t微信小程序 httpDNSServiceId\tString\t否\tHttpDNS 服务商 Id。 HttpDNS 用法详见 移动解析HttpDNS\t微信小程序 enableChunked\tBoolean\t否\tfalse\t开启 transfer-encoding chunked\t微信小程序 forceCellularNetwork\tBoolean\t否\tfalse\twifi下使用移动网络发送请求\t微信小程序 enableCookie\tBoolean\t否\tfalse\t开启后可在headers中编辑cookie\t支付宝小程序 10.2.33+ cloudCache\tObject/Boolean\t否\tfalse\t是否开启云加速（详见云加速服务）\t百度小程序 3.310.11+ defer\tBoolean\t否\tfalse\t控制当前请求是否延时至首屏内容渲染后发送\t百度小程序 3.310.11+ success\tFunction\t否\t收到开发者服务器成功返回的回调函数 fail\tFunction\t否\t接口调用失败的回调函数 complete\tFunction\t否\t接口调用结束的回调函数（调用成功、失败都会执行） method 有效值\n注意：method有效值必须大写，每个平台支持的method有效值不同，详细见下表。\nmethod\tApp\tH5\t微信小程序\t支付宝小程序\t百度小程序\t字节跳动小程序、飞书小程序\t快手小程序\t京东小程序 GET\t√\t√\t√\t√\t√\t√\t√\t√ POST\t√\t√\t√\t√\t√\t√\t√\t√ PUT\t√\t√\t√\tx\t√\t√\tx\tx DELETE\t√\t√\t√\tx\t√\tx\tx\tx CONNECT\tx\t√\t√\tx\tx\tx\tx\tx HEAD\t√\t√\t√\tx\t√\tx\tx\tx OPTIONS\t√\t√\t√\tx\t√\tx\tx\tx TRACE\tx\t√\t√\tx\tx\tx\tx\tx success 返回参数说明\n参数\t类型\t说明 data\tObject/String/ArrayBuffer\t开发者服务器返回的数据 statusCode\tNumber\t开发者服务器返回的 HTTP 状态码 header\tObject\t开发者服务器返回的 HTTP Response Header cookies\tArray.\t开发者服务器返回的 cookies，格式为字符串数组 data 数据说明\n最终发送给服务器的数据是 String 类型，如果传入的 data 不是 String 类型，会被转换成 String。转换规则如下：\n对于 GET 方法，会将数据转换为 query string。例如 { name: \u0026rsquo;name\u0026rsquo;, age: 18 } 转换后的结果是 name=name\u0026amp;age=18。\n对于 POST 方法且 header[\u0026lsquo;content-type\u0026rsquo;] 为 application/json 的数据，会进行 JSON 序列化。\n对于 POST 方法且 header[\u0026lsquo;content-type\u0026rsquo;] 为 application/x-www-form-urlencoded 的数据，会将数据转换为 query string。\n测试\n我们先用springboot搞一个测试接口。\n接口没有问题，然后我们试一试\nok，搞定\n我们发现一个问题，就是小程序内部运行机制与网页不同，小程序中的代码并不运行在浏览器中，因为小程序开发中，不存在数据的跨域请求限制。\n所以我们不做跨域处理也可以访问。\n问题\n如果微信开发者工具中，没有发送成功，可以试试如下方法。\n14.2 二次封装请求对象 如果像上面那样，每次调用我都要去写请求的ip地址端口号，显得有些麻烦。\n假如说ip地址或者端口号变了，那就得每一个请求都要逐一修改，这是很恐怖的！\n所以，我们需要统一进行二次封装，对这些公共的参数统一进行设置或者修改。减少冗余，提高效率。\nrequest.js\nconst BASE_URL = \u0026lsquo;http://localhost:8000\u0026rsquo;\nexport const myRequest = (options) =\u0026gt; { return new Promise((resove,reject)=\u0026gt;{ uni.request({ url: BASE_URL + options.url, method: options.method || \u0026lsquo;GET\u0026rsquo;, data: options.data || {}, success: (res) =\u0026gt; { if(res.data.code != 1){ return uni.showToast({ title:\u0026lsquo;获取数据失败\u0026rsquo; }) } resove(res) }, fail: (err) =\u0026gt; { uni.showToast({ title:\u0026lsquo;请求接口失败\u0026rsquo; }), reject(err) } }) }) } main.js\n测试：编写页面调接口\n这次我们换个接口试试\n（哈哈，其实上面的那个接口是我年初写的，现在找不到代码了，自己重写😂）\n我们尝试关闭接口，再次刷新页面发现页面显示：请求接口失败。ok，完全符合。\n又因为我们的请求是通过Promise返回的，所以我们可以异步的去调用方法。稍微修改一下，也能成功获取到。（记得重启后端项目哦😆）\n十五、数据缓存 15.1 uni.setStorage(OBJECT) 将数据存储在本地缓存中指定的 key 中，会覆盖掉原来该 key 对应的内容，这是一个异步接口。\nOBJECT 参数说明\n参数名\t类型\t必填\t说明 key\tString\t是\t本地缓存中的指定的 key data\tAny\t是\t需要存储的内容，只支持原生类型、及能够通过 JSON.stringify 序列化的对象 success\tFunction\t否\t接口调用成功的回调函数 fail\tFunction\t否\t接口调用失败的回调函数 complete\tFunction\t否\t接口调用结束的回调函数（调用成功、失败都会执行）\n15.2 uni.getStorage(OBJECT) 从本地缓存中异步获取指定 key 对应的内容。\nOBJECT 参数说明\n参数名\t类型\t必填\t说明 key\tString\t是\t本地缓存中的指定的 key success\tFunction\t是\t接口调用的回调函数，res = {data: key对应的内容} fail\tFunction\t否\t接口调用失败的回调函数 complete\tFunction\t否\t接口调用结束的回调函数（调用成功、失败都会执行） success 返回参数说明\n参数\t类型\t说明 data\tAny\tkey 对应的内容\n15.3 uni.removeStorage(OBJECT) 从本地缓存中异步移除指定 key。\nOBJECT 参数说明\n参数名\t类型\t必填\t说明 key\tString\t是\t本地缓存中的指定的 key success\tFunction\t是\t接口调用的回调函数 fail\tFunction\t否\t接口调用失败的回调函数 complete\tFunction\t否\t接口调用结束的回调函数（调用成功、失败都会执行）\n15.4 uni.setStorageSync(KEY,DATA) 将 data 存储在本地缓存中指定的 key 中，会覆盖掉原来该 key 对应的内容，这是一个同步接口。\n15.5 uni.getStorageSync(KEY) 从本地缓存中同步获取指定 key 对应的内容。\n15.6 uni.removeStorageSync(KEY) 从本地缓存中同步移除指定 key。\n十六、图片的上传和预览 16.1 上传 uni.chooseImage(OBJECT)\n从本地相册选择图片或使用相机拍照。\nApp端如需要更丰富的相机拍照API（如直接调用前置摄像头），参考plus.camera\n微信小程序从基础库 2.21.0 开始， wx.chooseImage 停止维护，请使用 uni.chooseMedia 代替。\nOBJECT 参数说明\n参数名\t类型\t必填\t说明\t平台差异说明 count\tNumber\t否\t最多可以选择的图片张数，默认9\t见下方说明 sizeType\tArray\t否\toriginal 原图，compressed 压缩图，默认二者都有\tApp、微信小程序、支付宝小程序、百度小程序 extension\tArray\t否\t根据文件拓展名过滤，每一项都不能是空字符串。默认不过滤。\tH5(HBuilder X2.9.9+) sourceType\tArray\t否\talbum 从相册选图，camera 使用相机，默认二者都有。如需直接开相机或直接选相册，请只使用一个选项 crop\tObject\t否\t图像裁剪参数，设置后 sizeType 失效\tApp 3.1.19+ success\tFunction\t是\t成功则返回图片的本地文件路径列表 tempFilePaths fail\tFunction\t否\t接口调用失败的回调函数\t小程序、App complete\tFunction\t否\t接口调用结束的回调函数（调用成功、失败都会执行） crop 参数说明\n参数名\t类型\t必填\t说明\t平台差异说明 quality\tNumber\t否\t取值范围为1-100，数值越小，质量越低（仅对jpg格式有效）。默认值为80。 width\tNumber\t是\t裁剪的宽度，单位为px，用于计算裁剪宽高比。 height\tNumber\t是\t裁剪的高度，单位为px，用于计算裁剪宽高比。 resize\tBoolean\t否\t是否将width和height作为裁剪保存图片真实的像素值。默认值为true。注：设置为false时在裁剪编辑界面显示图片的像素值，设置为true时不显示 Tips\ncount 值在 H5 平台的表现，基于浏览器本身的规范。目前测试的结果来看，只能限制单选/多选，并不能限制数量。并且，在实际的手机浏览器很少有能够支持多选的。\nsourceType 值在 H5 平台根据浏览器的不同而表现不同，一般不可限制仅使用相册，部分浏览器也无法限制是否使用相机。\n可以通过用户授权API来判断用户是否给应用授予相册或摄像头的访问权限uni.authorize(OBJECT) | uni-app官网\nApp端如需选择非媒体文件，可在插件市场搜索文件选择，其中Android端可以使用Native.js，无需原生插件，而iOS端需要原生插件。\n选择照片大多为了上传，uni ui封装了更完善的uni-file-picker组件，文件选择、上传到uniCloud的免费存储和cdn中，一站式集成。强烈推荐使用。\n注：文件的临时路径，在应用本次启动期间可以正常使用，如需持久保存，需在主动调用 uni.saveFile，在应用下次启动时才能访问得到。\nsuccess 返回参数说明\n参数\t类型\t说明 tempFilePaths\tArray\t图片的本地文件路径列表 tempFiles\tArray、Array\t图片的本地文件列表，每一项是一个 File 对象 File 对象结构如下\n参数\t类型\t说明 path\tString\t本地文件路径 size\tNumber\t本地文件大小，单位：B name\tString\t包含扩展名的文件名称，仅H5支持 type\tString\t文件类型，仅H5支持\nok，这是简单的从本地获取图片到页面展示。但是真正的上传还没有完成。\n这里我打算调用后端接口完成上传过程。\n","date":"2024-10-02T00:00:00Z","image":"https://qiniu-web-assets.dcloud.net.cn/unidoc/zh/uni-app.png","permalink":"http://localhost:1313/actions-test/p/uniapp-%E5%BC%80%E5%8F%91%E7%AF%87/","title":"Uniapp 开发篇"}]